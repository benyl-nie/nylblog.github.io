<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js原生array之map</title>
      <link href="/2019/07/01/js%E5%8E%9F%E7%94%9Farray%E4%B9%8Bmap/"/>
      <url>/2019/07/01/js%E5%8E%9F%E7%94%9Farray%E4%B9%8Bmap/</url>
      
        <content type="html"><![CDATA[<h2 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p> map()方法创建一个新数组，其结果是该数组中每个元素都调用一个提供的函数后返回的结果<br> 举例如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var Array1 = [1, 4, 9, 6];</span><br><span class="line">// pass a <span class="keyword">function</span> to map</span><br><span class="line"></span><br><span class="line">const map1 = array1.map(x =&gt; x * 2);</span><br><span class="line">console.log(map1);</span><br><span class="line">// expected output: [2, 8, 18, 12]</span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var newArray = arr.map(<span class="keyword">function</span> callback(currentValue[, index[, array]])) &#123;</span><br><span class="line"><span class="built_in">return</span> element <span class="keyword">for</span> new_array</span><br><span class="line">&#125;[, thisArg]);</span><br></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>1、<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback</span><br></pre></td></tr></table></figure></p><p>生成新的数组函数，使用三个参数</p><ul><li><p>1.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currentValue</span><br></pre></td></tr></table></figure><p>callback数组中正在处理的当前元素.</p></li><li><p>1.2</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index</span><br></pre></td></tr></table></figure><p> (可选) callback 数组中正在处理的当前元素的索引.</p><ul><li>1.3</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array</span><br></pre></td></tr></table></figure><p>(可选)执行callback函数时使用的this值。</p><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>一个新数组，每个元素都是回调函数的结果。</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>map方法会给原数组中的每个元素都按顺序调用一次callback函数。callback每次执行后的返回值(包括undefined)组合起来形成一个新数组。callback函数只会在有值的索引上被调用；那些从来没被赋过值或者使用delete删除的索引则不会被调用。<br>callback 函数会被自动传入三个参数：数组元素、元素索引、原数组本身。<br>如果thisArg参数有值，则每次callback函数被调用的时候，this都会指向thisArg参数上的这个对象.如果省略了thisArg参数，后者赋值为null活undefined，则this指向全局对象。<br>map不修改调用它的原数组本身(当然可以在callback执行时改变原数组).<br>使用map方法处理数组时，数组元素的范围在callback方法第一次调用之前就已经确定了。在map方法执行的过程中:原数组中新增加的元素将不会被callback访问到；若已经存在的元素被改变或删除了，则他们的传递到callback的值map方法便利到它们的那一时刻的值;而被删除的元素不会被访问到。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h5 id="求数组中每个元素的平方根"><a href="#求数组中每个元素的平方根" class="headerlink" title="求数组中每个元素的平方根"></a>求数组中每个元素的平方根</h5><p>下面的代码创建了一个新数组，值为原数组中对应数字的平方根</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var numbers = [1, 4, 9];</span><br><span class="line">var roots = numbers.map(Math.sqrt);</span><br><span class="line">// roots的值为[1,2,3], numbers的值仍为[1,4,9]</span><br></pre></td></tr></table></figure><h5 id="使用map重新格式化数组中的对象"><a href="#使用map重新格式化数组中的对象" class="headerlink" title="使用map重新格式化数组中的对象"></a>使用map重新格式化数组中的对象</h5><p>以下代码使用一个包含对象的数组来重新创建一个格式化的数组.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var kvArray = [&#123;key: 1, value: 10&#125;,</span><br><span class="line">  &#123;key: 2, value: 20&#125;,</span><br><span class="line">  &#123;key: 3, value: 30&#125;,</span><br><span class="line"> ];</span><br><span class="line">var reformattedArray = kvArray.map(<span class="keyword">function</span>(obj) &#123;</span><br><span class="line">var rObj = &#123;&#125;;</span><br><span class="line">rObj[obj.key] = obj.value;</span><br><span class="line"><span class="built_in">return</span> rObj;</span><br><span class="line">&#125;);</span><br><span class="line">// reforamttedArray 数组为: [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;];</span><br><span class="line">// kvArray 数组未被修改</span><br><span class="line">// [&#123;key: 1, value: 10&#125;,</span><br><span class="line">//&#123;key: 2, value: 20&#125;,</span><br><span class="line">//&#123;key: 3, value: 30&#125;]</span><br></pre></td></tr></table></figure><h5 id="使用一个包含一个参数的函数来mapping-构建-一个数字数组"><a href="#使用一个包含一个参数的函数来mapping-构建-一个数字数组" class="headerlink" title="使用一个包含一个参数的函数来mapping(构建)一个数字数组"></a>使用一个包含一个参数的函数来mapping(构建)一个数字数组</h5><p>下面的代码表示了当函数需要一个参数时map的工作方式。当map循环便利原始数组时，这个参数回自动被分配成数组中对应的每个元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var numbers = [1, 4, 9];</span><br><span class="line">var doubles = numbers.map(<span class="keyword">function</span>(item) =&gt; &#123;</span><br><span class="line"><span class="built_in">return</span> num * 2;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// doubles数组的值为: [2, 8, 18];</span><br><span class="line">// numbers数组未被修改 [1, 4, 9]</span><br></pre></td></tr></table></figure><h5 id="一般的map方法"><a href="#一般的map方法" class="headerlink" title="一般的map方法"></a>一般的map方法</h5><p>下面的例子演示如何在一个String上使用map方法获取字符串中每个字符多对应的ASCII码组成的数组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var map = Array.prototype.map;</span><br><span class="line">var a = map.call(<span class="string">'Hello World'</span>, <span class="keyword">function</span>(x) &#123;</span><br><span class="line"><span class="built_in">return</span> x.charCodeAt(0);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="querySelectorAll-应用"><a href="#querySelectorAll-应用" class="headerlink" title="querySelectorAll 应用"></a>querySelectorAll 应用</h5><p>下面代码展示了如何去遍历用querySelectorAll 得到的动态对象集合。在这里，我们获得了文档里所有选中的选项，并将其打印:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var elems =document.querySelectorAll(<span class="string">'select option:checked'</span>);</span><br><span class="line">var values = Array.prototype.map.call(elems. <span class="keyword">function</span>(obj) &#123;</span><br><span class="line"><span class="built_in">return</span> obj.value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="使用技巧案例"><a href="#使用技巧案例" class="headerlink" title="使用技巧案例"></a>使用技巧案例</h5><p>通常情况下，map方法中的callback函数只需要接受一个参数，就是正在被遍历的数组元素本身。但这并不意味着map只给callback传了一个参数。这个思维惯性可能会让我们犯一个很容易犯的错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 下面的语句返回什么呢:</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(parseInt);</span><br><span class="line">// 你可能觉得会是 [1, 2, 3];</span><br><span class="line">// 但实际结果是[1, NaN, NaN];</span><br><span class="line"></span><br><span class="line">// 通常使用parseInt时，只需要传递一个参数</span><br><span class="line">// 但实际上，parseInt可以有两个参数，第二个参数是进制数</span><br><span class="line">// 可以通过语句 <span class="string">'alert(parseInt.length) === 2'</span>来验证</span><br><span class="line">// map方法在调用callback函数时，会给它传递三个参数：当前正在遍历的元素，元素索引，原数组本身。</span><br><span class="line">// 第三个参数parseInt 会忽视，但第二个参数不会，也就是说，parseInt把传过来的索引值当成进制数来使用，从而返回了NaN</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> returnInt (element) &#123;</span><br><span class="line"><span class="built_in">return</span> parseInt(element, 10);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(returnInt); // [1, 2, 3] 意料之中的结果</span><br><span class="line"></span><br><span class="line">// 也可以使用简单的箭头函数，结果同上</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map( str =&gt; parseInt(str));</span><br><span class="line"></span><br><span class="line">// 一个简单的方式:</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(Number); // [1, 2, 3]</span><br><span class="line"></span><br><span class="line">// 与`parseInt`不同，下面的结果会返回浮点数或指数</span><br><span class="line">[<span class="string">'1.1'</span>, <span class="string">'2.2e2'</span>, <span class="string">'3e300'</span>].map(Number); // [1.1, 220, 3e+300]</span><br></pre></td></tr></table></figure><h5 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h5><p>map是在最近的ECMA-262 标准中新添加的方法；所以一些旧版本的浏览器可能没有实现该方法。在那些没有原生支持map方法的浏览器中，你可以使用下面的Javascript代码来实现它。所使用的算法正式ECMA-262,第五版规定的。假定Object,TypeError, 和Array有他们的原始值。而且callback.call的原始值也是Function.prototype.call</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">// 实现ECMA-262， Edition 5,15.4.4.19</span><br><span class="line"> //参考： http://es5.github/com/<span class="comment">#x15.4.4.19</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!Array.prototype.map) &#123;</span><br><span class="line"> Array.prototype.map = <span class="keyword">function</span>(callback, thisArg) &#123;</span><br><span class="line"> var T,A,k;</span><br><span class="line"> <span class="keyword">if</span>(this == null) &#123;</span><br><span class="line"> throw new TypeError(<span class="string">' this is null or not defined'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 1.将0赋值为调用map方法的数组</span><br><span class="line"> var 0 = Object(this);</span><br><span class="line"></span><br><span class="line"> // 2.将len赋值为数组0的长度</span><br><span class="line"> var len = 0.length &gt;&gt;&gt; 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> // 3.如果callback 不是函数，则跑出TypeError异常</span><br><span class="line"> <span class="keyword">if</span> (Object.prototype.toString.call(callback) != <span class="string">'[object Function]'</span>) &#123;</span><br><span class="line"> throw new TypeError(callback + <span class="string">' is not a function'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 4. 如果参数thisArg有值，则将T赋值为thisArg;</span><br><span class="line"><span class="keyword">if</span> (thisArg) &#123;</span><br><span class="line">T = thisArg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 5. 创建新数组A,长度为原数组0长度len</span><br><span class="line">A = new Array(len);</span><br><span class="line"></span><br><span class="line">// 6. 将k赋值为0</span><br><span class="line">k = 0;</span><br><span class="line"></span><br><span class="line">// 7. 当k &lt; len时，执行循环</span><br><span class="line"><span class="keyword">while</span>(k &lt; len) &#123;</span><br><span class="line">var kValue, mappedValue;</span><br><span class="line">// 遍历0，k为原数组索引</span><br><span class="line"><span class="keyword">if</span> (k <span class="keyword">in</span> 0) &#123;</span><br><span class="line">// kValue为索引k对应的值</span><br><span class="line">kValue = 0[k];</span><br><span class="line"></span><br><span class="line">// 执行callback,this指向T，参数有三个，分别是kValue:值，k:索引，0:原数组</span><br><span class="line">mappedValue = callback.call(T,kValue,k,0);</span><br><span class="line">// 返回值添加到新数组A中</span><br><span class="line">A[k] = mappedValue;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// k自增1</span><br><span class="line">k ++;</span><br><span class="line">&#125;</span><br><span class="line">// 返回新数组</span><br><span class="line"><span class="built_in">return</span> A;</span><br><span class="line"> &#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js之map</title>
      <link href="/2019/06/22/js%E4%B9%8Bmap/"/>
      <url>/2019/06/22/js%E4%B9%8Bmap/</url>
      
        <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>  <strong>map</strong> 对象保存键值对。任何值（对象或原始值）都可以作为一个键或一个值。</p><h3 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Map([iterable])</span><br></pre></td></tr></table></figure><p>2.1 参数</p><p> <em>iterable</em>可以是数组或者其他iterabled对象，其元素为键值对（两个元素的数组，例如[[1: ‘one’],[2: ‘two’]]）。每个键值对都会添加到 <strong>新的Map</strong>。<em>null</em> 会被当作 <em>undefined</em></p><h3 id="三、-描述"><a href="#三、-描述" class="headerlink" title="三、 描述"></a>三、 描述</h3><p>一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个 <em>for…of</em>循环在每次迭代后会返回一个形式为[key,value]数组。</p><h5 id="键的相等（Key-equality）"><a href="#键的相等（Key-equality）" class="headerlink" title="键的相等（Key equality）"></a>键的相等（Key equality）</h5><p>键的比较是基于”Same ValueZero”算法： <em>NaN</em> 是与 <em>NaN</em> 相等的（虽然 <em>NaN !== NaN</em>）,剩下所有其他的值是根据 <strong>===</strong> 运算符的结果判断是否相等。在目前的ECMAScript规范中，-0 和 +0 被认为是相等的，尽管在早期的草案中并不是这样。</p><h5 id="Objects-和-Maps的比较"><a href="#Objects-和-Maps的比较" class="headerlink" title="Objects 和 Maps的比较"></a>Objects 和 Maps的比较</h5><p> Objects 和 Maps 类似的是，他们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成Maps使用。不过Maps和Objects有一些重要的区别，在下列情况里使用Map会是更好的选择。</p><p>1、 一个Object的键只能是<em>字符串</em>或者<em>Symbols</em>，但一个Map的键可以是<strong>任意值</strong>，包括函数、对象、基本类型。<br>2、 Map中的键值是有序的，而添加到对象中的键则不是。因此，当对他进行遍历时，Map对象时按插入的顺序返回键值。<br>3、 你可以通过<em>size</em>属性直接获取一个<em>Map</em>的键值对个数，而<em>Object</em>的键值对个数只能手动计算。<br>4、 Map可直接迭代，而Object的迭代需要先获取他的键值数组，然后再进行迭代。<br>5、 Object都有自己的原型，原型链上的键名有可能和你自己对象上的设置的键名产生冲突。虽然ES5开始可以用 <em>map = Object.create(null)</em> 来创建一个没有原型的对象，但是这种用法不太常见。<br>6、 Map在涉及频繁增删键值对的场景下会有些性能优势。</p><h3 id="四、属性"><a href="#四、属性" class="headerlink" title="四、属性"></a>四、属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.length</span><br></pre></td></tr></table></figure><p>  属性length的值为0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get Map[@@species]</span><br></pre></td></tr></table></figure><p>本构造函数用于创建派生对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype</span><br></pre></td></tr></table></figure><p>表示Map构造器的原型。允许添加属性从而应用于所有的Map对象</p><h3 id="五、Map-实例"><a href="#五、Map-实例" class="headerlink" title="五、Map 实例"></a>五、Map 实例</h3><p>所有的Map对象实例都会继承 Map.prototype</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype.constructor</span><br></pre></td></tr></table></figure><p>  返回一个函数，它创建了实例的原型。默认时Map函数</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype.size</span><br></pre></td></tr></table></figure><p>  返回Map对象的键/值对的数量</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype.clear()</span><br></pre></td></tr></table></figure><p>  移除Map对象的所有键/值对。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype.delete(key)</span><br></pre></td></tr></table></figure><p>  如果Map对象中存在该元素，则移除它并返回true；否则如果该元素不存在则返回false</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype.entries()</span><br></pre></td></tr></table></figure><p>  返回一个新的 <em>Iterator</em> 对象，它按插入顺序包含了Map对象中每个元素的<strong>[key,value]</strong>数组。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype.forEach(callbackFn[, thisArg])</span><br></pre></td></tr></table></figure><p>  按插入顺序，为Map对象里的每一键值对调用一次callbackFn函数。如果forEach 提供了thisArg,它将在每次回调中作为this值。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype.get(key)</span><br></pre></td></tr></table></figure><p>  返回键对应的值，如果不存在，则返回undefined</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype.has(key)</span><br></pre></td></tr></table></figure><p>  返回一个布尔值，表示Map实例是否包含键对应的值。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype.keys()</span><br></pre></td></tr></table></figure><p>  返回一个新的 <em>Iterator</em>对象，他按插入顺序包含了Map对象中的每个元素的<strong>键</strong>。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype.set(key,value)</span><br></pre></td></tr></table></figure><p>  设置Map对象中键的值。返回该Map对象。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype.values()</span><br></pre></td></tr></table></figure><p>  返回一个新的<em>Iterator</em>对象，他按插入顺序包含了Map对象中每个元素的<strong>值</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map.prototype[@@iterator]()</span><br></pre></td></tr></table></figure><p>  返回一个新的 <em>Iterator</em>对象，他按插入顺序包含了Map对象中的每个元素的<strong>[key,value]数组</strong>。</p><h3 id="六、示例"><a href="#六、示例" class="headerlink" title="六、示例"></a>六、示例</h3><h5 id="使用Map对象"><a href="#使用Map对象" class="headerlink" title="使用Map对象"></a>使用Map对象</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var myMap = new Map();</span><br><span class="line">var keyObj = &#123;&#125;,</span><br><span class="line">    keyFunc = <span class="function"><span class="title">function</span></span>() &#123;&#125;,</span><br><span class="line">    keyString = <span class="string">'a string'</span>;</span><br><span class="line"></span><br><span class="line">  // 添加键</span><br><span class="line"> myMap.set(keyString, <span class="string">"和键'a string' 关联的值"</span>);</span><br><span class="line"> myMap.set(keyObj, <span class="string">'和键keyObj关联的值'</span>);</span><br><span class="line"> myMap.set(keyFunc, <span class="string">'和键keyFunc关联的值'</span>);</span><br><span class="line"></span><br><span class="line"> myMap.size(); // 3</span><br><span class="line"></span><br><span class="line"> // 读取值</span><br><span class="line"> myMap.get(keyString); // 和键<span class="string">'a string'</span> 关联的值</span><br><span class="line"> myMap.get(keyObj); // 和键keyObj关联的值</span><br><span class="line"> myMap.get(keyFunc); // 和键keyFunc关联的值</span><br><span class="line"></span><br><span class="line"> myMap.get(<span class="string">'a string'</span>); // 和键<span class="string">'a string'</span> 关联的值</span><br><span class="line"> myMap.get(&#123;&#125;); // undefined,因为 keyObj !== &#123;&#125;</span><br><span class="line"> myMap.get(<span class="function"><span class="title">function</span></span>() &#123;&#125;); // undefined, 因为keyFunc !== <span class="function"><span class="title">funcetion</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="将NaN作为Map的键"><a href="#将NaN作为Map的键" class="headerlink" title="将NaN作为Map的键"></a>将NaN作为Map的键</h5><p>NaN 也可以作为Map对象的键。虽然NaN和任何值甚至和自己都不相等(NaN !== NaN 返回 true)， 但下面的例子表明，NaN作为Map的键来说是没有区别的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var myMap = new Map();</span><br><span class="line">myMap.set(NaN, <span class="string">'not a number'</span>);</span><br><span class="line">MyMap.get(NaN); // <span class="string">'not a number'</span></span><br><span class="line"></span><br><span class="line">var otherNaN = Number(<span class="string">'foo'</span>);</span><br><span class="line">myMap.get(otherNaN); // <span class="string">'not a number'</span></span><br></pre></td></tr></table></figure><h5 id="使用-for…of-方法迭代Map"><a href="#使用-for…of-方法迭代Map" class="headerlink" title="使用 for…of 方法迭代Map"></a>使用 for…of 方法迭代Map</h5><p>Map可以使用<em>for…of</em>循环来实现迭代</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var myMap = new Map();</span><br><span class="line">myMap.set(0, <span class="string">'zero'</span>);</span><br><span class="line">myMap.set(1, <span class="string">'one'</span>);</span><br><span class="line"><span class="keyword">for</span>(var [key, value] of myMap) &#123;</span><br><span class="line">console.log(key + <span class="string">' = '</span> + value);</span><br><span class="line">&#125;</span><br><span class="line">// 将会展示两个<span class="built_in">log</span>.一个是<span class="string">'0 = zero'</span> 另一个是 <span class="string">'1 = one'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (var key of myMap.keys()) &#123;</span><br><span class="line">console.log(key);</span><br><span class="line">&#125;</span><br><span class="line">// 将会展示两个<span class="built_in">log</span>，一个是<span class="string">'0'</span>,一个是<span class="string">'1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(var value of myMap.values()) &#123;</span><br><span class="line">console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 将会展示两个<span class="built_in">log</span>,一个是<span class="string">'zero'</span> 另一个是<span class="string">'one'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(var [key, value] of myMap.extries()) &#123;</span><br><span class="line">  console.log(key + <span class="string">' = '</span> + value);</span><br><span class="line">&#125;</span><br><span class="line">// 将会展示两个<span class="built_in">log</span>，一个是 0 = zero 另一个是 1 = one</span><br></pre></td></tr></table></figure><h5 id="使用forEach-方法迭代Map"><a href="#使用forEach-方法迭代Map" class="headerlink" title="使用forEach 方法迭代Map"></a>使用forEach 方法迭代Map</h5><p> Map也可以通过<em>forEach()</em>方法迭代</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myMap.forEach(<span class="keyword">function</span>(value, key) &#123;</span><br><span class="line">  console.log(key + <span class="string">' = '</span> + value);</span><br><span class="line">&#125;, myMap);</span><br><span class="line">// 将会展示两个logs 一个是 0 = zero 另一个是 1 = one</span><br></pre></td></tr></table></figure><h5 id="Map与数组的关系"><a href="#Map与数组的关系" class="headerlink" title="Map与数组的关系"></a>Map与数组的关系</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var kvArray = [[<span class="string">"key1"</span>, <span class="string">"value1"</span>], [<span class="string">"key2"</span>, <span class="string">"value2"</span>]];</span><br><span class="line"></span><br><span class="line">// 使用常规的Map构造函数可以将一个二维键值对数组转换成一个Map对象</span><br><span class="line"></span><br><span class="line">var myMap = new Map(kvArray);</span><br><span class="line"></span><br><span class="line">myMap.get(<span class="string">"key1"</span>); // 返回值为 value1</span><br><span class="line"></span><br><span class="line">// 使用Array.from 函数可以将一个Map对象转换成一个二维键值对数组</span><br><span class="line">console.log(Array.from(myMap)); // 输出和kvArray相同的数组</span><br><span class="line"></span><br><span class="line">// 或者在键或者值的迭代器上使用Array.from, 进而得到只含有键或者值的数组</span><br><span class="line">console.log(Array.from(myMap.keys())); // 输出[<span class="string">'key1'</span>, <span class="string">'key2'</span>];</span><br></pre></td></tr></table></figure><h5 id="复制或合并Maps"><a href="#复制或合并Maps" class="headerlink" title="复制或合并Maps"></a>复制或合并Maps</h5><p>Map能像数组一样被复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var original = new Map([1, <span class="string">'one'</span>]);</span><br><span class="line">var <span class="built_in">clone</span> = new Map(original);</span><br><span class="line"></span><br><span class="line">console.log(clone.get(1)); // one</span><br><span class="line">console.log(original === <span class="built_in">clone</span>); // <span class="literal">false</span>. Useful <span class="keyword">for</span> shallow comparison</span><br></pre></td></tr></table></figure><p><strong>请记住，数据本身未被克隆</strong></p><p>Map对象间可以进行合并，但是会保持键的唯一性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var first = new Map([</span><br><span class="line">  [1, <span class="string">'one'</span>],</span><br><span class="line">  [2, <span class="string">'two'</span>],</span><br><span class="line">  [3, <span class="string">'three'</span>]</span><br><span class="line">]);</span><br><span class="line">var second = new Map([</span><br><span class="line">[1, <span class="string">'uno'</span>],</span><br><span class="line">[2, <span class="string">'doc'</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">// 合并两个Map对象时，如果有重复的键值，则后面的会覆盖前面的</span><br><span class="line"></span><br><span class="line">// 展开运算符本质上是将Map对象转换成数组</span><br><span class="line"></span><br><span class="line">var merged = new Map([...first, ...second]);</span><br><span class="line">console.log(merged.get(1)); // uno</span><br><span class="line">console.log(merged.get(2)); // doc</span><br><span class="line">console.log(merged.get(3)); // three</span><br></pre></td></tr></table></figure><p>Map对象也能与数组合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var first = new Map([</span><br><span class="line">  [1, <span class="string">'one'</span>],</span><br><span class="line">  [2, <span class="string">'two'</span>],</span><br><span class="line">  [3, <span class="string">'three'</span>]</span><br><span class="line"> ]);</span><br><span class="line">var second = new Map([</span><br><span class="line">[1, <span class="string">'uno'</span>],</span><br><span class="line">[2, <span class="string">'doc'</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">// Map对象同数组进行合并时。如果有重复的键值，则后面的会覆盖前面的。</span><br><span class="line">var merged = new Map([...first, ...second, [1, <span class="string">'eins'</span>]]);</span><br><span class="line">onsole.log(merged.get(1)); // eins</span><br><span class="line">console.log(merged.get(2)); // doc</span><br><span class="line">console.log(merged.get(3)); // three</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看javascript技巧有感</title>
      <link href="/2019/06/21/%E7%9C%8Bjavascript%E6%8A%80%E5%B7%A7%E6%9C%89%E6%84%9F/"/>
      <url>/2019/06/21/%E7%9C%8Bjavascript%E6%8A%80%E5%B7%A7%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="这段时间听同时面试校招生，发现自己原生js很弱，需要狂补，以下为看《一个合格的中级前端工程师要掌握的javaScript技巧》有感"><a href="#这段时间听同时面试校招生，发现自己原生js很弱，需要狂补，以下为看《一个合格的中级前端工程师要掌握的javaScript技巧》有感" class="headerlink" title="这段时间听同时面试校招生，发现自己原生js很弱，需要狂补，以下为看《一个合格的中级前端工程师要掌握的javaScript技巧》有感"></a>这段时间听同时面试校招生，发现自己原生js很弱，需要狂补，以下为看<a href="https://mp.weixin.qq.com/s/X6ks8HrhAXvIjkcnZ9qMLw" target="_blank" rel="noopener">《一个合格的中级前端工程师要掌握的javaScript技巧》</a>有感</h4><h5 id="一、判断对象的数据类型"><a href="#一、判断对象的数据类型" class="headerlink" title="一、判断对象的数据类型"></a>一、判断对象的数据类型</h5><p><code>bash const</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> javaScript Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20190403 git 错误操作</title>
      <link href="/2019/04/04/20190403-git-%E9%94%99%E8%AF%AF%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/04/04/20190403-git-%E9%94%99%E8%AF%AF%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="20190403-git-错误操作"><a href="#20190403-git-错误操作" class="headerlink" title="20190403 git 错误操作"></a>20190403 git 错误操作</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>   当时把所有的业务代码都写完了，看了pr，想优化下分支中的一些文件，就用了以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git <span class="built_in">log</span> + 文件路径 // 查找到想要会退的commit，例如commit id 为 saasasa</span><br><span class="line">git reset -- hard saasasa</span><br><span class="line">git push -g origin + 本地分支名</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>  直接导致远程代码被reset了，后提交的所有commit都不存在，导致代码数据全部都没有了，毁灭，难受，心塞，心慌</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reflog show // 查找最近操作的head</span><br><span class="line">git reset + 想要回退的操作的headId</span><br><span class="line">git <span class="built_in">log</span> // 即可看到上一次reset前的<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>注释：例如我操作我本地的分支的一个  git reflog show</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fc2310c9 (HEAD -&gt; git/<span class="built_in">test</span>) HEAD@&#123;0&#125;: checkout: moving from feature/optional-settlement to git/<span class="built_in">test</span></span><br><span class="line">26284977 (origin/feature/optional-settlement, feature/optional-settlement) HEAD@&#123;1&#125;: reset: moving to HEAD</span><br><span class="line">26284977 (origin/feature/optional-settlement, feature/optional-settlement) HEAD@&#123;2&#125;: checkout: moving from git/<span class="built_in">test</span> to feature/optional-settlement</span><br><span class="line">fc2310c9 (HEAD -&gt; git/<span class="built_in">test</span>) HEAD@&#123;3&#125;: reset: moving to HEAD@&#123;2&#125;</span><br><span class="line">d730bc53 (origin/git/<span class="built_in">test</span>) HEAD@&#123;4&#125;: reset: moving to HEAD@&#123;0&#125;</span><br><span class="line">d730bc53 (origin/git/<span class="built_in">test</span>) HEAD@&#123;5&#125;: reset: moving to d730bc5333a6f0054227d9476dffb5dc5308f5e8</span><br><span class="line">fc2310c9 (HEAD -&gt; git/<span class="built_in">test</span>) HEAD@&#123;6&#125;: commit: git测试</span><br><span class="line">5d1965a0 (origin/master, origin/HEAD, master) HEAD@&#123;7&#125;: checkout: moving from master to git/<span class="built_in">test</span></span><br><span class="line">5d1965a0 (origin/master, origin/HEAD, master) HEAD@&#123;8&#125;: checkout: moving from qatest to master</span><br><span class="line">83eede1e (origin/qatest, qatest) HEAD@&#123;9&#125;: commit (merge): 合同</span><br><span class="line">ed915fc5 HEAD@&#123;10&#125;: merge feature/remove-branch: Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line">f3d9ba99 HEAD@&#123;11&#125;: merge feature/customer-log: Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line">26284977 (origin/feature/optional-settlement, feature/optional-settlement) HEAD@&#123;12&#125;: merge feature/optional-settlement: Fast-forward</span><br><span class="line">5d1965a0 (origin/master, origin/HEAD, master) HEAD@&#123;13&#125;: checkout: moving from master to qatest</span><br><span class="line">5d1965a0 (origin/master, origin/HEAD, master) HEAD@&#123;14&#125;: checkout: moving from qatest to master</span><br><span class="line">8254f765 HEAD@&#123;15&#125;: reset: moving to HEAD</span><br><span class="line">8254f765 HEAD@&#123;16&#125;: checkout: moving from feature/optional-settlement to qatest</span><br><span class="line">26284977 (origin/feature/optional-settlement, feature/optional-settlement) HEAD@&#123;17&#125;: commit: 删除注</span><br><span class="line">释 &amp; 字段修改</span><br><span class="line">2f3028b0 HEAD@&#123;18&#125;: commit: 选座优化</span><br></pre></td></tr></table></figure><h4 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h4><p>  一、git reset –hard 和  git push -f 和  git pull -f 这些强制性的操作太过于危险，最好不要使用，切勿在公共分支使用</p><p>  二、如果想将某个提交过的文件回退,可以使用如下操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -- 文件路径</span><br><span class="line">git checkout  + commitId + 文件路径</span><br></pre></td></tr></table></figure><p>这样就可以将文件回退<br>然后用 <code>git push</code> 即可</p><p>  三、 对于分支强拉或者强推 ，最好不要使用 <code>-force</code>  ，可以考虑使用 <code>rebase</code> 操作，不会重新生成 commitId, 操作比较柔和</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack2.x升级到4.x踩坑点</title>
      <link href="/2019/03/05/webpack2-x%E5%8D%87%E7%BA%A7%E5%88%B04-x%E8%B8%A9%E5%9D%91%E7%82%B9/"/>
      <url>/2019/03/05/webpack2-x%E5%8D%87%E7%BA%A7%E5%88%B04-x%E8%B8%A9%E5%9D%91%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="升级时间"><a href="#升级时间" class="headerlink" title="升级时间"></a>升级时间</h4><p>2019-03-03 ~ 2019-03-04</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>升级未完成 20190305业务堆积</p><h4 id="升级遇到问题汇总"><a href="#升级遇到问题汇总" class="headerlink" title="升级遇到问题汇总"></a>升级遇到问题汇总</h4><h5 id="一、旧项目直接升级webpack报错（npm-install-webpack-）"><a href="#一、旧项目直接升级webpack报错（npm-install-webpack-）" class="headerlink" title="一、旧项目直接升级webpack报错（npm install webpack ）"></a>一、旧项目直接升级webpack报错（npm install webpack ）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 此部分从网上粘贴，报错大致类似</span><br><span class="line"></span><br><span class="line">peerDependencies link ajv@5.5.2 <span class="keyword">in</span> D:\work-span\travel\Travel\node_modules\_ajv-keywords@2.1.1@ajv-keywords unmet with D:\work-span\travel\Travel\node_modules\ajv(6.6.2)</span><br><span class="line">peerDependencies WARNING webpack-dev-server@^3.1.14 requires a peer of webpack@^4.0.0 but webpack@3.12.0 was installed</span><br><span class="line">peerDependencies WARNING webpack-cli@^3.1.2 requires a peer of webpack@^4.x.x but webpack@3.12.0 was installed</span><br><span class="line">peerDependencies WARNING webpack-dev-server@3.1.14 › webpack-dev-middleware@3.4.0 requires a peer of webpack@^4.0.0 but webpack@3.12.0 was installed</span><br><span class="line">deprecate autoprefixer@7.2.6 › browserslist@^2.11.3 Browserslist 2 could fail on reading Browserslist 3.0 config used <span class="keyword">in</span> other tools.</span><br><span class="line">deprecate css-loader@0.28.11 › cssnano@3.10.0 › autoprefixer@6.7.7 › browserslist@^1.7.6 Browserslist 2</span><br><span class="line">could fail on reading Browserslist 3.0 config used <span class="keyword">in</span> other tools.</span><br><span class="line">deprecate eslint@4.19.1 › file-entry-cache@2.0.0 › flat-cache@1.3.4 › circular-json@^0.3.1 CircularJSON</span><br><span class="line">is <span class="keyword">in</span> maintenance only, flatted is its successor.</span><br><span class="line">deprecate webpack-bundle-analyzer@2.13.1 › bfj-node4@^5.2.0 Switch to the `bfj` package <span class="keyword">for</span> fixes and new features!</span><br><span class="line">Recently updated (since 2018-12-18): 9 packages (detail see file D:\work-span\travel\Travel\node_modules\.recently_updates.txt)</span><br><span class="line">√ All packages installed (928 packages installed from npm registry, used 38s(network 37s), speed 529.19</span><br><span class="line">kB/s, json 802(1.72MB), tarball 17.22MB)</span><br></pre></td></tr></table></figure><p> 原因：旧系统本身安装了webpack以及其他包依赖，在升级之前需要先卸载或删除，然后升级才能成功，如下:升级后的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall webpack</span><br><span class="line">npm install webpack</span><br></pre></td></tr></table></figure><h5 id="二、将webpack-webpack-cli-webpack-server-升级成功后，npm-run-build-报错"><a href="#二、将webpack-webpack-cli-webpack-server-升级成功后，npm-run-build-报错" class="headerlink" title="二、将webpack webpack-cli webpack-server 升级成功后，npm run build 报错"></a>二、将webpack webpack-cli webpack-server 升级成功后，npm run build 报错</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack4 Error: webpack.optimize.CommonsChunkPlugin has been removed,</span><br><span class="line">      please use config.optimization.splitChunks instead</span><br></pre></td></tr></table></figure><p>webpack4.x 版本与 2.x 区别之一就是webpack.optimize.CommonsChunkPlugin被移除了，原先在项目中的不可用了，需要用新的config.optimization.splitChunks，原先用法如图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">'common'</span>,</span><br><span class="line">  filename: isBuild ? <span class="string">'commons-[chunkhash].min.js'</span> : <span class="string">'commons.js'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>改进后的用法为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      name: <span class="string">'common'</span>,</span><br><span class="line">      filename: isBuild ? <span class="string">'commons-[chunkhash].min.js'</span> : <span class="string">'commons.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">      name: <span class="string">'common'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="三、如上，splitChunks的写法还有问题，报错信息如图"><a href="#三、如上，splitChunks的写法还有问题，报错信息如图" class="headerlink" title="三、如上，splitChunks的写法还有问题，报错信息如图:"></a>三、如上，splitChunks的写法还有问题，报错信息如图:</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">chunk optimization</span><br><span class="line">SplitChunksPlugin/Users/nieyuling/space/bd-node/node_modules/webpack/lib/optimize/SplitChunksPlugin.js:740</span><br><span class="line">throw new Error(</span><br><span class="line">^</span><br><span class="line">Error: SplitChunksPlugin: You are trying to <span class="built_in">set</span> a filename <span class="keyword">for</span> a chunk <span class="built_in">which</span></span><br><span class="line">is (also) loaded on demand. The runtime can only handle loading of chunks</span><br><span class="line"><span class="built_in">which</span> match the chunkFilename schema. Using a custom filename would fail</span><br><span class="line">at runtime. (cache group: vendors)</span><br></pre></td></tr></table></figure><p>原因：少写 chunks: ‘initial’,<br>加后为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">  splitChunks: &#123;</span><br><span class="line">    chunks: <span class="string">'initial'</span>,</span><br><span class="line">    name: <span class="string">'common'</span>,</span><br><span class="line">    filename: isBuild ? <span class="string">'commons-[chunkhash].min.js'</span> : <span class="string">'commons.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  runtimeChunk: &#123;</span><br><span class="line">    name: <span class="string">'common'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="四、-npm-run-build-后-html-webpack-plugin-before-html-generation-报错"><a href="#四、-npm-run-build-后-html-webpack-plugin-before-html-generation-报错" class="headerlink" title="四、 npm run build 后 html-webpack-plugin-before-html-generation 报错"></a>四、 npm run build 后 html-webpack-plugin-before-html-generation 报错</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/Users/nieyuling/space/bd-node/node_modules/add-asset-html-webpack-plugin</span><br><span class="line">/lib/index.js:119</span><br><span class="line">  beforeGenerationHook.tapPromise(<span class="string">'AddAssetHtmlPlugin'</span>, htmlPluginData =</span><br><span class="line">                          ^</span><br><span class="line">TypeError: Cannot <span class="built_in">read</span> property <span class="string">'tapPromise'</span> of undefined</span><br></pre></td></tr></table></figure><p>原因： html-webpack-plugin版本有问题，安装稳定版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin@next</span><br></pre></td></tr></table></figure><h5 id="五、webpack提示Cannot-read-property-‘properties’-of-undefined错误"><a href="#五、webpack提示Cannot-read-property-‘properties’-of-undefined错误" class="headerlink" title="五、webpack提示Cannot read property ‘properties’ of undefined错误"></a>五、webpack提示Cannot read property ‘properties’ of undefined错误</h5><p>解决办法:<br>一、将webpack升级到稳定版，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-cli@next</span><br></pre></td></tr></table></figure><p>二、将对应的依赖包卸载再重新装，可能是包老的原因</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h5 id="六、Tapable-plugin-is-deprecated-Use-new-API-on-hooks-instead"><a href="#六、Tapable-plugin-is-deprecated-Use-new-API-on-hooks-instead" class="headerlink" title="六、Tapable.plugin is deprecated. Use new API on .hooks instead"></a>六、Tapable.plugin is deprecated. Use new API on <code>.hooks</code> instead</h5><p> 原因： 在使用extract-text-webpack-plugin给webpack打包时出现报错，extract-text-webpack-plugin目前版本不支持webpack4。需要将extract-text-webpack-plugin升级到稳定版或者最新版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall extract-text-webpack-plugin</span><br><span class="line">npm install extract-text-webpack-plugin@next</span><br></pre></td></tr></table></figure><h5 id="七、htmlWebpackPluginBeforeHtmlGeneration-tapPromise-为undefined"><a href="#七、htmlWebpackPluginBeforeHtmlGeneration-tapPromise-为undefined" class="headerlink" title="七、htmlWebpackPluginBeforeHtmlGeneration.tapPromise 为undefined"></a>七、htmlWebpackPluginBeforeHtmlGeneration.tapPromise 为undefined</h5><p>报错版本：</p><p>“webpack”: “^4.29.6”,</p><p>“html-webpack-plugin”: “^2.28.0”,</p><p>需要将html-webpack-plugin升级到最新版或者稳定版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uminstall html-webpack-plugin</span><br><span class="line">npm install html-webpack-plugin@next</span><br></pre></td></tr></table></figure><h5 id="八、webpack-config-js配置遇到Error-Cannot-find-module-‘-babel-core’-amp-amp-Cannot-find-module-‘-babel-plugin-transform-react-jsx’-问题"><a href="#八、webpack-config-js配置遇到Error-Cannot-find-module-‘-babel-core’-amp-amp-Cannot-find-module-‘-babel-plugin-transform-react-jsx’-问题" class="headerlink" title="八、webpack.config.js配置遇到Error: Cannot find module ‘@babel/core’&amp;&amp;Cannot find module ‘@babel/plugin-transform-react-jsx’ 问题"></a>八、webpack.config.js配置遇到Error: Cannot find module ‘@babel/core’&amp;&amp;Cannot find module ‘@babel/plugin-transform-react-jsx’ 问题</h5><p> 原因：babel-core 应用 babel-loader的版本用起来须对应上，一般来说，高版本的需要需要同时运用，当时 babel-code的版本为”@babel/core”: “^7.3.4”, 而 “babel-loader”:8.x 两个版本同时运用会出错，需要将”babel-loader”的版本降低:降低后为 “babel-loader”: “^6.2.4”</p><h4 id="官方解释：官方默认babel-loader-babel-对应的版本需要一致-即babel-loader需要搭配最新版本babel"><a href="#官方解释：官方默认babel-loader-babel-对应的版本需要一致-即babel-loader需要搭配最新版本babel" class="headerlink" title="官方解释：官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel"></a>官方解释：官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel</h4><h5 id="九、cannot-find-‘less-loader’"><a href="#九、cannot-find-‘less-loader’" class="headerlink" title="九、cannot find ‘less-loader’"></a>九、cannot find ‘less-loader’</h5><p>less-loader版本低，需要先卸载less以及less-loader，再install重新安装</p><h5 id="十、Cannot-read-property-‘fileLoader’-of-undefined"><a href="#十、Cannot-read-property-‘fileLoader’-of-undefined" class="headerlink" title="十、Cannot read property ‘fileLoader’ of undefined"></a>十、Cannot read property ‘fileLoader’ of undefined</h5><p> file-loader版本低，需要先卸载less以及less-loader，再install重新安装</p><h5 id="十、less-version-3-9-0-is-not-currently-supported"><a href="#十、less-version-3-9-0-is-not-currently-supported" class="headerlink" title="十、less version 3.9.0 is not currently supported"></a>十、less version 3.9.0 is not currently supported</h5><p>原因: less版本过高，与package内gulp-less版本不搭</p><p>做法: less降低版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall less</span><br><span class="line">npm install less@2.7.0</span><br></pre></td></tr></table></figure><h5 id="十一、Cannot-read-property-‘hash’-of-undefined"><a href="#十一、Cannot-read-property-‘hash’-of-undefined" class="headerlink" title="十一、Cannot read property ‘hash’ of undefined"></a>十一、Cannot read property ‘hash’ of undefined</h5><p>报错信息意思是htmlWebpackPlugin插件有问题</p><p>原因：webpack打包有问题<br>也就是webpack配置有问题<br>跟斯腾（同事）请教，可以先只配置报错信息的插件，也就是htmlWebpackPlugin插件，然后一步步注释放开，最后判断问题在插件speed-measure-webpack-plugin上，将其不使用，build正常</p><h5 id="十二、build正常，dev-start正常以及dev-server正常，但是本地浏览器访问时，页面空白，没有html渲染"><a href="#十二、build正常，dev-start正常以及dev-server正常，但是本地浏览器访问时，页面空白，没有html渲染" class="headerlink" title="十二、build正常，dev-start正常以及dev-server正常，但是本地浏览器访问时，页面空白，没有html渲染"></a>十二、build正常，dev-start正常以及dev-server正常，但是本地浏览器访问时，页面空白，没有html渲染</h5><h4 id="十三、webpack4-一些plugin移除，例如："><a href="#十三、webpack4-一些plugin移除，例如：" class="headerlink" title="十三、webpack4 一些plugin移除，例如："></a>十三、webpack4 一些plugin移除，例如：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: webpack.optimize.UglifyJsPlugin has been removed,</span><br><span class="line">please use config.optimization.minimize instead.</span><br></pre></td></tr></table></figure><p>原因： webpack4基于零配置的思想，部分插件被移除，如webpack.optimize.UglifyJsPlugin在webpack4中已经被移除，在optimization对象中配置optimization.minimize=true即可，如果是生产环境的模式（mode：production）下，则该属性默认为true，默认压缩</p><h4 id="十四、webpack4所有都build完毕，本地访问页面空白，打开元素查看dom无html节点元素"><a href="#十四、webpack4所有都build完毕，本地访问页面空白，打开元素查看dom无html节点元素" class="headerlink" title="十四、webpack4所有都build完毕，本地访问页面空白，打开元素查看dom无html节点元素"></a>十四、webpack4所有都build完毕，本地访问页面空白，打开元素查看dom无html节点元素</h4><p>原因，将所有打包文件用chunks方式命名，没有触发chunks渲染<br>解决办法：将打包chunks的方式注释，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">// splitChunks: &#123;</span><br><span class="line">//   chunks: <span class="string">'all'</span>,</span><br><span class="line">//   name: <span class="literal">true</span>,</span><br><span class="line">//   // filename: isBuild ? <span class="string">'common-code-[chunkhash].min.js'</span> : <span class="string">'common-code.js'</span>,</span><br><span class="line">// &#125;,</span><br><span class="line">// runtimeChunk: &#123;</span><br><span class="line">//   name: <span class="string">'runtime'</span></span><br><span class="line">// &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十五、大部分页面渲染无误，少部分页面渲染有问题，报错信息如下"><a href="#十五、大部分页面渲染无误，少部分页面渲染有问题，报错信息如下" class="headerlink" title="十五、大部分页面渲染无误，少部分页面渲染有问题，报错信息如下"></a>十五、大部分页面渲染无误，少部分页面渲染有问题，报错信息如下</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error: Command failed: /Users/nieyuling/space/bd-node/node_modules/</span><br><span class="line">freemarker.js/fmpp/fmpp /Users/nieyuling/space/bd-node/client/view/pages/admin/</span><br><span class="line">cinema_activity/index.ftl -C /var/folders/bw/16rd988j6_d_1_rz4r0tnvph0000gn/T/</span><br><span class="line">a336def9-848d-4a77-a9e1-1805fd9a8a4e</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>扁平化数据处理</title>
      <link href="/2019/03/03/%E6%89%81%E5%B9%B3%E5%8C%96%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
      <url>/2019/03/03/%E6%89%81%E5%B9%B3%E5%8C%96%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="给定一个嵌套的整型列表。设计一个迭代器，使其能够遍历这个整型列表中的所有整数。列表中的项或者为一个整数，或者是另一个列表。"><a href="#给定一个嵌套的整型列表。设计一个迭代器，使其能够遍历这个整型列表中的所有整数。列表中的项或者为一个整数，或者是另一个列表。" class="headerlink" title="给定一个嵌套的整型列表。设计一个迭代器，使其能够遍历这个整型列表中的所有整数。列表中的项或者为一个整数，或者是另一个列表。"></a>给定一个嵌套的整型列表。设计一个迭代器，使其能够遍历这个整型列表中的所有整数。列表中的项或者为一个整数，或者是另一个列表。</h4><h5 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h5><p>输入: [[1,1],2,[1,1]]</p><p>输出: [1,1,2,1,1]</p><p>解释: 通过重复调用 next 直到 hasNext 返回false，next 返回的元素的顺序应该是:[1,1,2,1,1]。</p><h4 id="示例二："><a href="#示例二：" class="headerlink" title="示例二："></a>示例二：</h4><p> 输入: [1,[4,[6]]]</p><p> 输出: [1,4,6]</p><p> 解释: 通过重复调用 next 直到 hasNext 返回false，next 返回的元素的顺序应该是: [1,4,6]。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p> 可以利用栈递归实现，依次判断各元素是否为空或者元素类型，递归调用输出，注意内存溢出</p><h5 id="用javascript实现"><a href="#用javascript实现" class="headerlink" title="用javascript实现"></a>用javascript实现</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var returnItems = [];</span><br><span class="line"><span class="keyword">function</span> Main(listArray) &#123;</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt;= listArray.length - 1; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeof (listArray[i]) === <span class="string">'number'</span>) &#123;</span><br><span class="line">            returnItems.push(listArray[i]);</span><br><span class="line">            console.log(returnItems.pop());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Main(listArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var list = new Array();</span><br><span class="line">list = [1,[2,[5,7]],3,4];</span><br><span class="line">Main(list);</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class NestedIterator &#123;</span><br><span class="line">constructor(list = []) &#123;</span><br><span class="line">this.currArray = list;</span><br><span class="line">this.currArray.currIndex = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  flat(list) &#123;</span><br><span class="line">    this.currArray = list;</span><br><span class="line">    const currIndex = list.currIndex;</span><br><span class="line">    <span class="built_in">let</span> value = list[ currIndex ];</span><br><span class="line"></span><br><span class="line">    list.currIndex = currIndex + 1;</span><br><span class="line">    <span class="keyword">if</span> (Object.prototype.toString.call(value).slice(8, -1) === <span class="string">'Array'</span>) &#123;</span><br><span class="line">      this.currArray = value;</span><br><span class="line">      this.currArray.parent = list;</span><br><span class="line">      this.currArray.currIndex = 0;</span><br><span class="line">      value = this.flat(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (this.currArray.currIndex &gt;= this.currArray.length &amp;&amp; this.currArray.parent) &#123;</span><br><span class="line">      const parent = this.currArray.parent;</span><br><span class="line">      this.currArray.parent = null;</span><br><span class="line">      this.currArray = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">hasNext</span></span>() &#123;</span><br><span class="line">    const currArray = this.currArray;</span><br><span class="line">    <span class="keyword">if</span> (currArray.currIndex &lt; currArray.length) &#123;</span><br><span class="line">      <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">next</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!this.hasNext()) &#123;</span><br><span class="line">      throw new Error(<span class="string">'已经没有值了'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> this.flat(this.currArray);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const nestedList = [1, 2, [3, 4, [5]], [6, [7, 8], [9, 10]]];</span><br><span class="line"><span class="built_in">let</span> i = new NestedIterator(nestedList);</span><br><span class="line"><span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">  console.log(i.next());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="用java实现"><a href="#用java实现" class="headerlink" title="用java实现"></a>用java实现</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * // This is the interface that allows <span class="keyword">for</span> creating nested lists.</span><br><span class="line"> * // You should not implement it, or speculate about its implementation</span><br><span class="line"> * class NestedInteger &#123;</span><br><span class="line"> *   public:</span><br><span class="line"> *     // Return <span class="literal">true</span> <span class="keyword">if</span> this NestedInteger holds a single <span class="built_in">integer</span>, rather than a nested list.</span><br><span class="line"> *     bool isInteger() const;</span><br><span class="line"> *</span><br><span class="line"> *     // Return the single <span class="built_in">integer</span> that this NestedInteger holds, <span class="keyword">if</span> it holds a single <span class="built_in">integer</span></span><br><span class="line"> *     // The result is undefined <span class="keyword">if</span> this NestedInteger holds a nested list</span><br><span class="line"> *     int getInteger() const;</span><br><span class="line"> *</span><br><span class="line"> *     // Return the nested list that this NestedInteger holds, <span class="keyword">if</span> it holds a nested list</span><br><span class="line"> *     // The result is undefined <span class="keyword">if</span> this NestedInteger holds a single <span class="built_in">integer</span></span><br><span class="line"> *     const vector&lt;NestedInteger &amp;getList() const;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class NestedIterator &#123;</span><br><span class="line">public:</span><br><span class="line">NestedIterator(vector&lt;NestedInteger &amp;nestedList) &#123;</span><br><span class="line">ini(nestedList, vec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ini(vector&lt;NestedInteger nestedList,stack&lt;int &amp;vec) &#123;</span><br><span class="line"><span class="keyword">for</span> (int i = nestedList.size()-1; i =0 ; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (nestedList[i].isInteger()) vec.push(nestedList[i].getInteger());</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ini(nestedList[i].getList(),vec);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int <span class="function"><span class="title">next</span></span>() &#123;</span><br><span class="line">int tmp = vec.top();</span><br><span class="line">vec.pop();</span><br><span class="line"><span class="built_in">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool <span class="function"><span class="title">hasNext</span></span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (vec.empty()) <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">stack&lt;int vec;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your NestedIterator object will be instantiated and called as such:</span><br><span class="line"> * NestedIterator i(nestedList);</span><br><span class="line"> * <span class="keyword">while</span> (i.hasNext()) cout &lt;&lt; i.next();</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo网站踩坑点</title>
      <link href="/2019/02/14/%E6%90%AD%E5%BB%BAhexo%E7%BD%91%E7%AB%99%E8%B8%A9%E5%9D%91%E7%82%B9/"/>
      <url>/2019/02/14/%E6%90%AD%E5%BB%BAhexo%E7%BD%91%E7%AB%99%E8%B8%A9%E5%9D%91%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="前提-安装了node-和-git"><a href="#前提-安装了node-和-git" class="headerlink" title="前提: 安装了node 和 git"></a>前提: 安装了node 和 git</h2><h3 id="一：-安装-hexo脚手架"><a href="#一：-安装-hexo脚手架" class="headerlink" title="一： 安装 hexo脚手架"></a>一： 安装 hexo脚手架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo -g</span><br></pre></td></tr></table></figure><h4 id="会出现以下信息："><a href="#会出现以下信息：" class="headerlink" title="会出现以下信息："></a>会出现以下信息：</h4><h5 id="1）"><a href="#1）" class="headerlink" title="1）"></a>1）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Error: EACCES: permission denied, access <span class="string">'/usr/local/lib/node_modules'</span></span><br><span class="line">npm ERR!  &#123; Error: EACCES: permission denied, access <span class="string">'/usr/local/lib/node_modules'</span></span><br><span class="line">npm ERR!   stack: <span class="string">'Error: EACCES: permission denied, access \'</span>/usr/<span class="built_in">local</span>/lib/node_modules\<span class="string">''</span>,</span><br><span class="line">npm ERR!   errno: -13,</span><br><span class="line">npm ERR!   code: <span class="string">'EACCES'</span>,</span><br><span class="line">npm ERR!   syscall: <span class="string">'access'</span>,</span><br><span class="line">npm ERR!   path: <span class="string">'/usr/local/lib/node_modules'</span> &#125;</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Please try running this <span class="built_in">command</span> again as root/Administrator.</span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/nieyuling/.npm/_logs/2019-02-14T07_10_39_923Z-debug.log</span><br></pre></td></tr></table></figure><h4 id="原因：-permission-denied-mac电脑没有权限，-需加-sudo-将安装命令改为"><a href="#原因：-permission-denied-mac电脑没有权限，-需加-sudo-将安装命令改为" class="headerlink" title="原因： permission denied, mac电脑没有权限， 需加 sudo, 将安装命令改为"></a>原因： permission denied, mac电脑没有权限， 需加 sudo, 将安装命令改为</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo -g</span><br></pre></td></tr></table></figure><hr><h5 id="2"><a href="#2" class="headerlink" title="2)"></a>2)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Error: EACCES: permission denied, mkdir <span class="string">'/usr/local/lib/node_modules/hexo-cli/node_modules/fsevents/build'</span></span><br><span class="line">gyp ERR! System Darwin 18.2.0</span><br><span class="line">gyp ERR! <span class="built_in">command</span> <span class="string">"/usr/local/bin/node"</span> <span class="string">"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"</span> <span class="string">"configure"</span> <span class="string">"--fallback-to-build"</span> <span class="string">"--module=/usr/local/lib/node_modules/hexo-cli/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node"</span> <span class="string">"--module_name=fse"</span> <span class="string">"--module_path=/usr/local/lib/node_modules/hexo-cli/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64"</span> <span class="string">"--napi_version=3"</span> <span class="string">"--node_abi_napi=napi"</span></span><br><span class="line">gyp ERR! cwd /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/fsevents</span><br><span class="line">gyp ERR! node -v v8.11.3</span><br><span class="line">gyp ERR! node-gyp -v v3.6.2</span><br><span class="line">gyp ERR! not ok</span><br><span class="line">node-pre-gyp ERR! build error</span><br></pre></td></tr></table></figure><h4 id="原因：-permission-denied，-同样是没有权限"><a href="#原因：-permission-denied，-同样是没有权限" class="headerlink" title="原因： permission denied， 同样是没有权限"></a>原因： permission denied， 同样是没有权限</h4><h4 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h4><p>可用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R <span class="variable">$USER</span> /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure></p><p>扩大权限，再重新执行一次<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo -g</span><br></pre></td></tr></table></figure></p><p>即可</p><hr><h3 id="二：安装成功以后"><a href="#二：安装成功以后" class="headerlink" title="二：安装成功以后"></a>二：安装成功以后</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folderName&gt;</span><br><span class="line"> <span class="comment">#执行时，此folder中会装入很多hexo配置文件和主题文件，文件目录应为一个子文件</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt; <span class="comment">#进入到hexo的文件中</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo install <span class="comment"># 安装依赖包</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">$ hexo server <span class="comment">#启动服务，默认在http://localhost:4000</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
